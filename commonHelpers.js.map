{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    handleDateSelection(selectedDates);\n  },\n};\n\nconst flatpickrInstance = flatpickr('#datetime-picker', options);\n\ndocument.querySelector('[data-start]').addEventListener('click', startTimer);\ndisableStartButton();\n\nfunction handleDateSelection(selectedDates) {\n  const userSelectedDate = selectedDates[0];\n\n  if (userSelectedDate < new Date()) {\n    showErrorMessage('Please choose a date in the future');\n    disableStartButton();\n  } else {\n    enableStartButton();\n  }\n}\n\nfunction startTimer() {\n  const userSelectedDate = flatpickrInstance.selectedDates[0];\n  const currentTime = Date.now();\n\n  if (!userSelectedDate || userSelectedDate < currentTime) {\n    showErrorMessage('Please choose a valid future date');\n    return;\n  }\n\n  const timeDifference = userSelectedDate - currentTime;\n  let timerInterval;\n\n  function updateTimerDisplay() {\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n    updateElement('[data-days]', days);\n    updateElement('[data-hours]', hours);\n    updateElement('[data-minutes]', minutes);\n    updateElement('[data-seconds]', seconds);\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n      showSuccessMessage('Countdown timer has reached the end date.');\n      disableStartButton();\n    }\n\n    timeDifference -= 1000;\n  }\n\n  updateTimerDisplay();\n  timerInterval = setInterval(updateTimerDisplay, 1000);\n}\n\nfunction disableStartButton() {\n  updateButtonState(true);\n}\n\nfunction enableStartButton() {\n  updateButtonState(false);\n}\n\nfunction updateButtonState(disabled) {\n  document.querySelector('[data-start]').disabled = disabled;\n}\n\nfunction showErrorMessage(message) {\n  iziToast.error({\n    title: 'Error',\n    message: message,\n  });\n}\n\nfunction showSuccessMessage(message) {\n  iziToast.success({\n    title: 'Success',\n    message: message,\n  });\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateElement(selector, value) {\n  document.querySelector(selector).textContent = addLeadingZero(value);\n}\n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     handleDateSelection(selectedDates);\n//   },\n// };\n\n// const flatpickrInstance = flatpickr('#datetime-picker', options);\n\n// document.querySelector('[data-start]').addEventListener('click', startTimer);\n// document.addEventListener('DOMContentLoaded', disableStartButton);\n\n// function handleDateSelection(selectedDates) {\n//   const userSelectedDate = selectedDates[0];\n\n//   if (userSelectedDate < new Date()) {\n//     showErrorMessage('Please choose a date in the future');\n//     disableStartButton();\n//   } else {\n//     enableStartButton();\n//   }\n// }\n\n// function startTimer() {\n//   const selectedDate = flatpickrInstance.selectedDates[0];\n//   const currentTime = Date.now();\n//   let timeDifference = selectedDate - currentTime;\n\n//   const timerInterval = setInterval(updateTimerDisplay, 1000);\n\n//   function updateTimerDisplay() {\n//     const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n//     updateElement('[data-days]', days);\n//     updateElement('[data-hours]', hours);\n//     updateElement('[data-minutes]', minutes);\n//     updateElement('[data-seconds]', seconds);\n\n//     if (timeDifference <= 0) {\n//       clearInterval(timerInterval);\n//       showSuccessMessage('Countdown timer has reached the end date.');\n//     }\n\n//     timeDifference -= 1000;\n//   }\n// }\n\n// function disableStartButton() {\n//   updateButtonState(true);\n// }\n\n// function enableStartButton() {\n//   updateButtonState(false);\n// }\n\n// function updateButtonState(disabled) {\n//   document.querySelector('[data-start]').disabled = disabled;\n// }\n\n// function showErrorMessage(message) {\n//   iziToast.error({\n//     title: 'Error',\n//     message: message,\n//   });\n// }\n\n// function showSuccessMessage(message) {\n//   iziToast.success({\n//     title: 'Success',\n//     message: message,\n//   });\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function updateElement(selector, value) {\n//   document.querySelector(selector).textContent =\n//     value >= 0 ? addLeadingZero(value) : '00';\n// }\n\n// function addLeadingZero(value) {\n//   return value < 10 ? `0${value}` : value;\n// }\n\n"],"names":["options","selectedDates","handleDateSelection","flatpickrInstance","flatpickr","startTimer","disableStartButton","showErrorMessage","enableStartButton","userSelectedDate","currentTime","timeDifference","timerInterval","updateTimerDisplay","days","hours","minutes","seconds","convertMs","updateElement","showSuccessMessage","updateButtonState","disabled","message","iziToast","ms","selector","value","addLeadingZero"],"mappings":"2FAKA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBC,EAAoBD,CAAa,CAClC,CACH,EAEME,EAAoBC,EAAU,mBAAoBJ,CAAO,EAE/D,SAAS,cAAc,cAAc,EAAE,iBAAiB,QAASK,CAAU,EAC3EC,IAEA,SAASJ,EAAoBD,EAAe,CACjBA,EAAc,GAEhB,IAAI,MACzBM,EAAiB,oCAAoC,EACrDD,KAEAE,GAEJ,CAEA,SAASH,GAAa,CACpB,MAAMI,EAAmBN,EAAkB,cAAc,GACnDO,EAAc,KAAK,MAEzB,GAAI,CAACD,GAAoBA,EAAmBC,EAAa,CACvDH,EAAiB,mCAAmC,EACpD,MACD,CAED,MAAMI,EAAiBF,EAAmBC,EAC1C,IAAIE,EAEJ,SAASC,GAAqB,CAC5B,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUP,CAAc,EAElEQ,EAAc,cAAeL,CAAI,EACjCK,EAAc,eAAgBJ,CAAK,EACnCI,EAAc,iBAAkBH,CAAO,EACvCG,EAAc,iBAAkBF,CAAO,EAEnCN,GAAkB,IACpB,cAAcC,CAAa,EAC3BQ,EAAmB,2CAA2C,EAC9Dd,KAGFK,GAAkB,GACnB,CAEDE,IACAD,EAAgB,YAAYC,EAAoB,GAAI,CACtD,CAEA,SAASP,GAAqB,CAC5Be,EAAkB,EAAI,CACxB,CAEA,SAASb,GAAoB,CAC3Ba,EAAkB,EAAK,CACzB,CAEA,SAASA,EAAkBC,EAAU,CACnC,SAAS,cAAc,cAAc,EAAE,SAAWA,CACpD,CAEA,SAASf,EAAiBgB,EAAS,CACjCC,EAAS,MAAM,CACb,MAAO,QACP,QAASD,CACb,CAAG,CACH,CAEA,SAASH,EAAmBG,EAAS,CACnCC,EAAS,QAAQ,CACf,MAAO,UACP,QAASD,CACb,CAAG,CACH,CAEA,SAASL,EAAUO,EAAI,CAMrB,MAAMX,EAAO,KAAK,MAAMW,EAAK,KAAG,EAC1BV,EAAQ,KAAK,MAAOU,EAAK,MAAO,IAAI,EACpCT,EAAU,KAAK,MAAQS,EAAK,MAAO,KAAQ,GAAM,EACjDR,EAAU,KAAK,MAASQ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAX,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAcO,EAAUC,EAAO,CACtC,SAAS,cAAcD,CAAQ,EAAE,YAAcE,EAAeD,CAAK,CACrE,CAEA,SAASC,EAAeD,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,CACpC"}